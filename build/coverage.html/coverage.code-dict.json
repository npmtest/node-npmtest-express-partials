{"/home/travis/build/npmtest/node-npmtest-express-partials/test.js":"/* istanbul instrument in package npmtest_express_partials */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-partials/lib.npmtest_express_partials.js":"/* istanbul instrument in package npmtest_express_partials */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_partials = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_partials = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-partials/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-partials && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_partials */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_partials\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_partials.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_partials.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_partials.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_partials.__dirname + '/lib.npmtest_express_partials.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-partials/node_modules/express-partials/index.js":"var path = require('path')\n  , fs = require('fs')\n  , exists = fs.existsSync || path.existsSync\n  , resolve = path.resolve\n  , dirname = path.dirname\n  , extname = path.extname\n  , basename = path.basename;\n\n\n/**\n * Express 3.x Layout & Partial support.\n *\n * The beloved feature from Express 2.x is back as a middleware.\n *\n * Example:\n *    \n *    var express = require('express')\n *      , partials = require('express-partials')\n *      , app = express();\n *    app.use(partials());\n *    // three ways to register a template engine:\n *    partials.register('coffee','coffeekup');\n *    partials.register('coffee',require('coffeekup'));\n *    partials.register('coffee',require('coffeekup').render);\n *    app.get('/',function(req,res,next){\n *      res.render('index.ejs') // renders layout.ejs with index.ejs as `body`.\n *    })\n * \n * Options:\n *\n *    none\n *\n */\n\nmodule.exports = function(){\n  return function(req,res,next){\n    // res.partial(view,options) -> res.render() (ignores any layouts)\n    res.partial = res.render;\n\n    // in template partial(view,options)\n    res.locals.partial = partial.bind(res);\n\n    // layout support\n    var _render = res.render.bind(res);\n    res.render = function(name, options, fn){\n      var layout = options && options.layout;\n\n      // default layout\n      if( layout === true || layout === undefined ) {\n        // Try to find default layout in view options, if not found, seek for 'layout'\n        var viewOptions = res.app.get('view options');\n        layout = viewOptions && viewOptions.defaultLayout || 'layout';\n      }\n      \n      // layout\n      if( layout ){\n        // first render normally\n        _render(name, options, function(err, body){\n          if( err )\n            return fn ? fn(err) : req.next(err);\n\n          options = options || {};\n          options.body = body;\n\n          // calculate the layout vars\n          var ext = extname(name) || '.'+(res.app.get('view engine') || 'ejs');\n          var root = req.app.get('views') || process.cwd() + '/views';\n          var dir = dirname(layout) == '.' ? root : resolve(root,dirname(layout));\n          var filename = dir+(path.sep||'/')+basename(layout,ext)+ext;\n\n          // See if we even have a layout to use\n          // If so, render it. If not, then fallback to just the original template\n          if (exists(filename)) {\n            layout = dirname(lookup(dir, layout, ext))+(path.sep||'/')+basename(layout,ext)+ext;\n            _render(layout, options, fn);\n          } else {\n            // layout may be in the same folder than the view\n            dir = dirname(name) == '.' ? root : resolve(root,dirname(name));\n            filename = dir+(path.sep||'/')+basename(layout,ext)+ext;\n\n            if(exists(filename)) {\n              layout = dirname(lookup(dir, layout, ext))+(path.sep||'/')+basename(layout,ext)+ext;\n              _render(layout, options, fn);\n            } else {\n              _render(name, options, fn);\n            }\n          }\n        })\n\n      // no layout\n      } else {\n        _render(name, options, fn);\n      }\n    }\n\n    // done\n    next();\n  }\n}\n\n/*** \n * Allow to register a specific rendering\n * function for a given extension.\n * (Similar to Express 2.x register() function.)\n *\n * The second argument might be:\n *   a template module's name\n *   a module with a `render` method\n *   a synchronous `render` method\n */\n\nfunction register(ext,render){\n  if(ext[0] != '.') {\n    ext = '.' + ext;\n  }\n  if(typeof render == 'string') {\n    render = require(render);\n  }\n  if(typeof render.render != 'undefined') {\n    register[ext] = render.render;\n  } else {\n    register[ext] = render;\n  }\n};\n\nmodule.exports.register = register;\n\n/**\n * Automatically assign a render() function\n * from a module of the same name if none\n * has been registered.\n */\n\nfunction renderer(ext){\n  if(ext[0] !== '.'){\n    ext = '.' + ext;\n  }\n  return register[ext] != null\n    ? register[ext]\n    : register[ext] = require(ext.slice(1)).render;\n};\n\nmodule.exports.renderer = renderer;\n\n/**\n * Memory cache for resolved object names.\n */\n\nvar cache = {};\n\n/**\n * Resolve partial object name from the view path.\n *\n * Examples:\n *\n *   \"user.ejs\" becomes \"user\"\n *   \"forum thread.ejs\" becomes \"forumThread\"\n *   \"forum/thread/post.ejs\" becomes \"post\"\n *   \"blog-post.ejs\" becomes \"blogPost\"\n *\n * @return {String}\n * @api private\n */\n\nfunction resolveObjectName(view){\n  return cache[view] || (cache[view] = view\n    .split(path.sep || '/')\n    .slice(-1)[0]\n    .split('.')[0]\n    .replace(/^_/, '')\n    .replace(/[^a-zA-Z0-9 ]+/g, ' ')\n    .split(/ +/).map(function(word, i){\n      return i\n        ? word[0].toUpperCase() + word.substr(1)\n        : word;\n    }).join(''));\n};\n\n/**\n * Lookup:\n *\n *   - partial `_<name>`\n *   - any `<name>/index`\n *   - non-layout `../<name>/index`\n *   - any `<root>/<name>`\n *   - partial `<root>/_<name>`\n *\n * @param {View} view\n * @return {String}\n * @api private\n */\n\nfunction lookup(root, view, ext){\n  var name = resolveObjectName(view);\n  var original = view;\n\n  // Try root ex: <root>/user.jade\n  view = resolve(root, basename(original,ext)+ext);\n  if( exists(view) ) return view;\n\n  // Try subdir ex: <root>/subdir/user.jade\n  view = resolve(root, dirname(original), basename(original,ext)+ext);\n  if( exists(view) ) return view;\n\n  // Try _ prefix ex: ./views/_<name>.jade\n  // taking precedence over the direct path\n  view = resolve(root,'_'+name+ext)\n  if( exists(view) ) return view;\n\n  // Try index ex: ./views/user/index.jade\n  view = resolve(root,name,'index'+ext);\n  if( exists(view) ) return view;\n\n  // Try ../<name>/index ex: ../user/index.jade\n  // when calling partial('user') within the same dir\n  view = resolve(root,'..',name,'index'+ext);\n  if( exists(view) ) return view;\n\n  // Try root ex: <root>/user.jade\n  view = resolve(root,name+ext);\n  if( exists(view) ) return view;\n\n  return null;\n};\nmodule.exports.lookup = lookup;\n\n/**\n * Render `view` partial with the given `options`. Optionally a\n * callback `fn(err, str)` may be passed instead of writing to\n * the socket.\n *\n * Options:\n *\n *   - `object` Single object with name derived from the view (unless `as` is present)\n *\n *   - `as` Variable name for each `collection` value, defaults to the view name.\n *     * as: 'something' will add the `something` local variable\n *     * as: this will use the collection value as the template context\n *     * as: global will merge the collection value's properties with `locals`\n *\n *   - `collection` Array of objects, the name is derived from the view name itself.\n *     For example _video.html_ will have a object _video_ available to it.\n *\n * @param  {String} view\n * @param  {Object|Array} options, collection or object\n * @return {String}\n * @api public\n */\n\nfunction partial(view, options){\n  var collection\n    , object\n    , locals\n    , name;\n\n  // parse options\n  if( options ){\n    // collection\n    if( options.collection ){\n      collection = options.collection;\n      delete options.collection;\n    } else if( 'length' in options ){\n      collection = options;\n      options = {};\n    }\n\n    // locals\n    if( options.locals ){\n      locals = options.locals;\n      delete options.locals;\n    }\n\n    // object\n    if( 'Object' != options.constructor.name ){\n      object = options;\n      options = {};\n    } else if( options.object != undefined ){\n      object = options.object;\n      delete options.object;\n    }\n  } else {\n    options = {};\n  }\n\n  // merge locals into options\n  if( locals )\n    options.__proto__ = locals;\n\n  // merge app locals into \n  for(var k in this.app.locals)\n    options[k] = options[k] || this.app.locals[k];\n\n  // merge locals, which as set using app.use(function(...){ res.locals = X; }) \n  for(var k in this.req.res.locals)\n    options[k] = options[k] || this.req.res.locals[k];\n\n  // let partials render partials\n  options.partial = partial.bind(this);\n\n  // extract object name from view\n  name = options.as || resolveObjectName(view);\n\n  // find view\n  var root = this.app.get('views') || process.cwd() + '/views'\n    , ext = extname(view) || '.' + (this.app.get('view engine')||'ejs')\n    , file = lookup(root, view, ext);\n  \n  // read view\n  var source = fs.readFileSync(file,'utf8');\n\n  // set filename option for renderer (Jade requires this for includes)\n  options.filename = file;\n\n  // render partial\n  function render(){\n    if (object) {\n      if ('string' == typeof name) {\n        options[name] = object;\n      } else if (name === global) {\n        // wtf?\n        // merge(options, object);\n      }\n    }\n    options.locals = locals\n    return renderer(ext)(source, options);\n  }\n\n  // Collection support\n  if (collection) {\n    var len = collection.length\n      , buf = ''\n      , keys\n      , key\n      , val;\n\n    if ('number' == typeof len || Array.isArray(collection)) {\n      options.collectionLength = len;\n      for (var i = 0; i < len; ++i) {\n        val = collection[i];\n        options.firstInCollection = i == 0;\n        options.indexInCollection = i;\n        options.lastInCollection = i == len - 1;\n        object = val;\n        buf += render();\n      }\n    } else {\n      keys = Object.keys(collection);\n      len = keys.length;\n      options.collectionLength = len;\n      options.collectionKeys = keys;\n      for (var i = 0; i < len; ++i) {\n        key = keys[i];\n        val = collection[key];\n        options.keyInCollection = key;\n        options.firstInCollection = i == 0;\n        options.indexInCollection = i;\n        options.lastInCollection = i == len - 1;\n        object = val;\n        buf += render();\n      }\n    }\n\n    return buf;\n  } else {\n    return render();\n  }\n}\n"}